#!/usr/bin/env python
#coding:utf-8
import os
import time
import re
import sys

# get timestamp
def get_timestamp(log):
    pattern = re.compile(r'\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}.\d{1,3}')
    time    = pattern.findall(log)
    return time

# get bt enable/disable option
def get_bt_option(log):
	p = re.match(r'.*BluetoothManagerService: enable\((.*?)\).*',log)
	if not p is None and p.group(1)!= '':
		return ("  ENABLE\t" + p.group(1))
	p = re.match(r'.*BluetoothManagerService: disable\(\).*',log)
	if not p is None :
		return "  DISABLE"
	return ''

# get ble enable/disable option
def get_ble_option(log):
	p = re.match(r'.*  (.*?)  (.*?) D BluetoothAdapter: enableBLE\(\): Calling enable',log)
	if not p is None :
		return (" enableBLE  " + p.group(1))
	p = re.match(r'.*  (.*?)  (.*?) D BluetoothAdapter: disableBLE\(\): de-registering (.*?)$',log)
	if not p is None :
		return (" disableBLE  " + p.group(1) + "  " + p.group(3))
	return ''

def le_scan_mode(arg):
    switcher = {
        '-1':'OPPORTUNISTIC',
        '0' :'LOW_POWER',
        '1' :'BALANCED',
        '2' :'LOW_LATENCY'
    }
    return switcher[arg]

# get ble scan state
def get_ble_scan(log):
    scan_start = re.match(r'.*  (.*?)  (.*?) D BluetoothLeScanner: start le scan , scan mode (.*?)$',log)
    scan_stop  = re.match(r'.*  (.*?)  (.*?) D BluetoothLeScanner: stop le scan',log)

    if not scan_start is None:
        mode = le_scan_mode(scan_start.group(3))
        return ('  ' + scan_start.group(1) + "\t" + 'start LE scan      scan mode: ' + mode)
    elif not scan_stop is None:
        return ('  ' + scan_stop.group(1) + "\t" + 'stop LE scan')
    else:
        return ''

# get bluetooth state
def get_bluetooth_state_change(log):
    pattern = re.compile(r'MESSAGE_BLUETOOTH_STATE_CHANGE: ?(.+)')
    state   = pattern.search(log)
    if not state is None:
        return state.group(1)
    else:
        return ''

#get bond devices state
def get_bond_state_change(log):
    p = re.match(r'.*BluetoothBondStateMachine: Bond State Change Intent:(.*?) (.*?)$',log)
    if not p is None:
        return (p.group(1) + "\t" + p.group(2))
    else:
        return ''

def get_a2dp_state(log):
    p = re.match(r'.*A2dpStateMachine: Connection state (.*?): (.*?)$',log)
    if not p is None:
        return (p.group(1) + "\tA2DP: " + p.group(2))
    p = re.match(r'.*A2dpStateMachine: A2DP Playing state : device: (.*?) State:(.*?)$',log)
    if not p is None:
        return (p.group(1) + "\tA2DP: " + p.group(2))
    else:
        return ''

def get_hfp_state(log):
    p = re.match(r'.*HeadsetStateMachine:.*state changed: (.*?): (.*?)$',log)
    if not p is None:
        return (p.group(1) + "\tHFP:  " + p.group(2))
    else:
        return ''

#get audio select output/input device
def get_audio_path(log):
    p = re.match(r'.*audio_hw_primary: select_devices: out_snd_device\((.*?)\) in_snd_device\((.*?)\)',log)
    if not p is None:
        #return ('Audio  out: ' + p.group(1) + '  in: ' + p.group(2))
	    return ('Audio  out: {}\t\tin: {}'.format(p.group(2),p.group(2)))
    else:
        return ''

#get phone state
def get_phone_state(log):
    p = re.match(r'.*Phone switching state: (.*?) -> (.*?)$',log)
    if not p is None and not p.group(1) == p.group(2): 
        return ('Phone: ' + p.group(1) + ' -> ' + p.group(2)) 
    else:
        return ''	

#get avrcp action
def get_avrcp_state(log):
    keycode = re.match(r'.*recordKeyDispatched: KeyEvent { action=ACTION_(.*?), keyCode=KEYCODE_MEDIA_(.*?),.*',log)
    if not keycode is None:
        return ('AVRCP: {:^4}|{}'.format(keycode.group(1),keycode.group(2)))
    else:
        return ''

def playback_state(arg):
    switcher = {
		'-1':'PLAYBACK_POSITION_UNKNOWN',
        '0' :'STATE_NONE',
        '1' :'STATE_STOPPED',
        '2' :'STATE_PAUSED',
        '3' :'STATE_PLAYING',
        '4' :'STATE_FAST_FORWARDING',
        '5' :'STATE_REWINDING',
        '6' :'STATE_BUFFERING',
        '7' :'STATE_ERROR',
        '8' :'STATE_CONNECTING',
        '9' :'STATE_SKIPPING_TO_PREVIOUS',
        '10' :'STATE_SKIPPING_TO_NEXT',
        '11' :'STATE_SKIPPING_TO_QUEUE_ITEM'                
    }
    return switcher[arg]
        
#get media state change
def get_media_state(log):
    p = re.match(r'.*MediaSessionManager: new playback state: PlaybackState {state=(.*?), position=(.*?),.*name=(.*?),.* active item id=(.*?)}',log)
    if not p is None:
        return ('Media update\tstate: '+playback_state(p.group(1))+' ,pos= '+p.group(2)+' ,name= '+p.group(3)+' ,id='+p.group(4))
    else:
        return ''

#log process
def process(log):
    log_time   = get_timestamp(log)
    bt_option  = get_bt_option(log)
    bt_state   = get_bluetooth_state_change(log)
    ble_option = get_ble_option(log)
    ble_scan   = get_ble_scan(log)
    bd_state   = get_bond_state_change(log)
    ad_state   = get_a2dp_state(log)
    hf_state   = get_hfp_state(log)
    audio_path = get_audio_path(log)
    rc_state   = get_avrcp_state(log)
    phone_state = get_phone_state(log)
    media_state= get_media_state(log)

    if log_time != [] and ((bt_state != '') or (bd_state != '') or (ad_state != '') or (hf_state != '')\
					or (rc_state != '') or (bt_option != '') or (ble_option != '') or (audio_path != '')\
					or (ble_scan != '') or (media_state != '') or (phone_state != '')):
        out = log_time[0] + bt_option + ble_option + ble_scan + "\t\t" + \
              bt_state + bd_state + "\t\t" + \
              ad_state + hf_state + audio_path + media_state + phone_state + "\t" + \
              rc_state  
        print(out)
        return out

def export(rf , wf):
    line = rf.readline()
    while line:
        log = line.strip()
        out = process(log)
        if wf != -1 and not out is None :
            wf.write(out+'\n')
        line = rf.readline()
    if wf != -1 :
        wf.close()
    rf.close()

# rename logcat.txt to logcat.txt.00 for subsequent processing
def rename_file(path):
    try:
        src_file = path + "/logcat.txt"
        dst_file = path + "/logcat.txt.00"
        os.rename(src_file,dst_file)
    except:
        src_file = ''   #do nothing
        
# Look for all logcat files and sort the files
def search_files(path):
    index = []
    files_lists = os.listdir(path)
    p = re.compile(r"logcat.txt.[0-9][0-9]$") 
    for item in files_lists:
        if p.match(item):
            index.append(item)
    index.sort(reverse = True)
    return index
    
def print_usage():
    print('usage:')
    print('read from adb logcat , input : btAnalysis')
    print('read from logcat file or dir ,input : btAnalysis logPath')

cmdlen = len(sys.argv)
if cmdlen <= 2 :
    #read from log file or files under path
    if cmdlen == 2 :
        logpath = sys.argv[1]
        if not os.path.exists(logpath):
            print "Could not find file %s" %(logpath)
            print_usage()
        else:
        	if os.path.isdir(logpath):
				rename_file(logpath)
				files = search_files(logpath)
				if len(files) == 0:
					print "Could not find any log file under %s" %(logpath)
				else:
					for target_file in files:
						print "--------------%s-----------------" %target_file
						rf = open(target_file)					  
						wf = open(target_file + ".bt",'a+')		            
						export(rf , wf)		            
        	elif os.path.isfile(logpath):
		        rf = open(logpath)
		        wf = open(logpath+".bt",'a+')
		        export(rf , wf)            
    #read from adb logcat
    elif cmdlen == 1:
        rf = os.popen("adb logcat",'r',1024)
        wf = -1
        export(rf , wf)
else:
    print_usage()
